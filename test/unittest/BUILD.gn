# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

ohos_unittest("face_auth_service_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = "face_auth/face_auth"

  sources = [
    "face_auth_all_in_one_executor_hdi_unit_test.cpp",
    "face_auth_driver_hdi_unit_test.cpp",
    "face_auth_executor_callback_hdi_unit_test.cpp",
    "face_auth_service_test.cpp",
    "sa_command_manager_unit_test.cpp",
    "state_machine_test.cpp",
  ]

  include_dirs = [ "mock" ]

  deps = [
    "../../frameworks/ipc:faceauth_framework_stub",
    "../../services:faceauthservice_source_set",
    "../../services_ex:faceauthservice_ex_source_set",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "drivers_interface_camera:libbuffer_producer_sequenceable_1.0",
    "drivers_interface_face_auth:libface_auth_proxy_2.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_surface:surface",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "safwk:system_ability_fwk",
    "user_auth_framework:userauth_executors",
    "selinux_adapter:librestorecon"
  ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  subsystem_name = "useriam"
  part_name = "face_auth"
}

ohos_unittest("face_auth_screen_brightness_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = "face_auth/face_auth"

  include_dirs = [ "mock" ]

  sources = [ "face_auth_screen_brightness_test.cpp" ]

  deps = [ "../../services:faceauthservice_source_set" ]

  external_deps = [
    "drivers_interface_camera:libbuffer_producer_sequenceable_1.0",
    "drivers_interface_face_auth:libface_auth_proxy_2.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_surface:surface",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "safwk:system_ability_fwk",
    "user_auth_framework:userauth_executors",
  ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  subsystem_name = "useriam"
  part_name = "face_auth"
}

ohos_unittest("face_auth_perm_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  module_out_path = "face_auth/face_auth"

  sources = [ "face_auth_service_perm_test.cpp" ]

  include_dirs = [ "mock" ]

  deps = [
    "../../frameworks/ipc:faceauth_framework_stub",
    "../../services:faceauthservice_source_set",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "drivers_interface_camera:libbuffer_producer_sequenceable_1.0",
    "drivers_interface_face_auth:libface_auth_proxy_2.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_surface:surface",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "safwk:system_ability_fwk",
    "user_auth_framework:userauth_executors",
  ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  subsystem_name = "useriam"
  part_name = "face_auth"
}

group("faceauth_unittest") {
  testonly = true
  deps = [
    ":face_auth_perm_test",
    ":face_auth_screen_brightness_test",
    ":face_auth_service_test",
  ]
}
